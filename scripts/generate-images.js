#!/usr/bin/env node
/**
 * Script to automatically generate the index.ts file with all images
 * 
 * Usage: npm run generate-images
 */

const fs = require('fs');
const path = require('path');

const PHOTOS_DIR = path.join(__dirname, '../src/assets/photos');
const OUTPUT_FILE = path.join(PHOTOS_DIR, 'index.ts');

const FOLDERS = ['hero', 'la-casita', 'la-olivita', 'casa-luna'];
const IMAGE_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.webp'];

function getImageFiles(folder) {
  const folderPath = path.join(PHOTOS_DIR, folder);
  
  if (!fs.existsSync(folderPath)) {
    return [];
  }
  
  return fs.readdirSync(folderPath)
    .filter(file => {
      const ext = path.extname(file).toLowerCase();
      return IMAGE_EXTENSIONS.includes(ext) && file !== '.gitkeep';
    })
    .sort(); // Orden alfabético
}

function generateImportName(folder, filename) {
  const baseName = path.basename(filename, path.extname(filename));
  // Reemplazar caracteres no válidos y asegurar que no empiece con número
  const safeName = baseName
    .replace(/[^a-zA-Z0-9]/g, '_')
    .replace(/^(\d)/, '_$1'); // Si empieza con número, añadir _
  
  const folderPrefix = folder.replace(/-/g, '_');
  return `img_${folderPrefix}_${safeName}`;
}

function generateIndexFile() {
  let content = `/**
 * ⚠️ AUTO-GENERATED FILE
 * Do not edit this file manually. Use: npm run generate-images
 * 
 * Images are loaded automatically from folders in alphabetical order.
 * Use numbers in filenames to control order: 01-photo.jpg, 02-photo.jpg, etc.
 */

interface ImageData {
  url: string;
  alt: string;
}

`;

  // Generar imports
  const imports = {};
  
  FOLDERS.forEach(folder => {
    const files = getImageFiles(folder);
    imports[folder] = [];
    
    files.forEach(file => {
      const importName = generateImportName(folder, file);
      content += `import ${importName} from './${folder}/${file}';\n`;
      imports[folder].push(importName);
    });
  });
  
  content += '\n';
  
  // Generar arrays de imágenes
  content += `// Hero images\n`;
  content += `export const heroImages: ImageData[] = [\n`;
  if (imports['hero'] && imports['hero'].length > 0) {
    imports['hero'].forEach(name => {
      content += `  { url: ${name}.src, alt: '' },\n`;
    });
  }
  content += `];\n\n`;
  
  // La Casita
  content += `// La Casita images\n`;
  content += `const casitaImages: ImageData[] = [\n`;
  if (imports['la-casita'] && imports['la-casita'].length > 0) {
    imports['la-casita'].forEach(name => {
      content += `  { url: ${name}.src, alt: '' },\n`;
    });
  }
  content += `];\n\n`;
  
  // La Olivita
  content += `// La Olivita images\n`;
  content += `const olivitaImages: ImageData[] = [\n`;
  if (imports['la-olivita'] && imports['la-olivita'].length > 0) {
    imports['la-olivita'].forEach(name => {
      content += `  { url: ${name}.src, alt: '' },\n`;
    });
  }
  content += `];\n\n`;
  
  // Casa Luna
  content += `// Casa Luna images\n`;
  content += `const lunaImages: ImageData[] = [\n`;
  if (imports['casa-luna'] && imports['casa-luna'].length > 0) {
    imports['casa-luna'].forEach(name => {
      content += `  { url: ${name}.src, alt: '' },\n`;
    });
  }
  content += `];\n\n`;
  
  // Export accommodationImages
  content += `/**
 * Images by accommodation
 */
export const accommodationImages = {
  'la-casita': casitaImages,
  'la-olivita': olivitaImages,
  'casa-luna': lunaImages,
};

/**
 * Get images for a specific accommodation
 */
export function getAccommodationImages(accommodationId: string): ImageData[] {
  return accommodationImages[accommodationId as keyof typeof accommodationImages] || [];
}

/**
 * Get Hero images
 */
export function getHeroImages(): ImageData[] {
  return heroImages;
}
`;
  
  fs.writeFileSync(OUTPUT_FILE, content);
  
  // Estadísticas
  console.log('✅ Archivo generado: src/assets/photos/index.ts');
  console.log('\nImágenes encontradas:');
  FOLDERS.forEach(folder => {
    const count = imports[folder] ? imports[folder].length : 0;
    console.log(`  ${folder}: ${count} imagen${count !== 1 ? 'es' : ''}`);
  });
}

// Ejecutar
try {
  generateIndexFile();
} catch (error) {
  console.error('❌ Error al generar el archivo:', error.message);
  process.exit(1);
}
